//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/HolidayMazeInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @HolidayMazeInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @HolidayMazeInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""HolidayMazeInput"",
    ""maps"": [
        {
            ""name"": ""QuitGame"",
            ""id"": ""0cf98c18-31ae-4862-af5a-59b2a222d372"",
            ""actions"": [
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""822c9c0f-20e9-4e50-851f-2b66ace2d42b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e48043fb-92be-4fd7-b685-9f433f379c3b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SwitchMusic"",
            ""id"": ""0a9730fc-d442-4aca-91c8-4da5c59f1897"",
            ""actions"": [
                {
                    ""name"": ""Switch"",
                    ""type"": ""Button"",
                    ""id"": ""db0ec65d-ef91-46d3-ae23-87af8c489571"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ccd9639f-47df-46ce-adf7-331a4fae719d"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // QuitGame
        m_QuitGame = asset.FindActionMap("QuitGame", throwIfNotFound: true);
        m_QuitGame_Quit = m_QuitGame.FindAction("Quit", throwIfNotFound: true);
        // SwitchMusic
        m_SwitchMusic = asset.FindActionMap("SwitchMusic", throwIfNotFound: true);
        m_SwitchMusic_Switch = m_SwitchMusic.FindAction("Switch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // QuitGame
    private readonly InputActionMap m_QuitGame;
    private List<IQuitGameActions> m_QuitGameActionsCallbackInterfaces = new List<IQuitGameActions>();
    private readonly InputAction m_QuitGame_Quit;
    public struct QuitGameActions
    {
        private @HolidayMazeInput m_Wrapper;
        public QuitGameActions(@HolidayMazeInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Quit => m_Wrapper.m_QuitGame_Quit;
        public InputActionMap Get() { return m_Wrapper.m_QuitGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(QuitGameActions set) { return set.Get(); }
        public void AddCallbacks(IQuitGameActions instance)
        {
            if (instance == null || m_Wrapper.m_QuitGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_QuitGameActionsCallbackInterfaces.Add(instance);
            @Quit.started += instance.OnQuit;
            @Quit.performed += instance.OnQuit;
            @Quit.canceled += instance.OnQuit;
        }

        private void UnregisterCallbacks(IQuitGameActions instance)
        {
            @Quit.started -= instance.OnQuit;
            @Quit.performed -= instance.OnQuit;
            @Quit.canceled -= instance.OnQuit;
        }

        public void RemoveCallbacks(IQuitGameActions instance)
        {
            if (m_Wrapper.m_QuitGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IQuitGameActions instance)
        {
            foreach (var item in m_Wrapper.m_QuitGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_QuitGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public QuitGameActions @QuitGame => new QuitGameActions(this);

    // SwitchMusic
    private readonly InputActionMap m_SwitchMusic;
    private List<ISwitchMusicActions> m_SwitchMusicActionsCallbackInterfaces = new List<ISwitchMusicActions>();
    private readonly InputAction m_SwitchMusic_Switch;
    public struct SwitchMusicActions
    {
        private @HolidayMazeInput m_Wrapper;
        public SwitchMusicActions(@HolidayMazeInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Switch => m_Wrapper.m_SwitchMusic_Switch;
        public InputActionMap Get() { return m_Wrapper.m_SwitchMusic; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwitchMusicActions set) { return set.Get(); }
        public void AddCallbacks(ISwitchMusicActions instance)
        {
            if (instance == null || m_Wrapper.m_SwitchMusicActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SwitchMusicActionsCallbackInterfaces.Add(instance);
            @Switch.started += instance.OnSwitch;
            @Switch.performed += instance.OnSwitch;
            @Switch.canceled += instance.OnSwitch;
        }

        private void UnregisterCallbacks(ISwitchMusicActions instance)
        {
            @Switch.started -= instance.OnSwitch;
            @Switch.performed -= instance.OnSwitch;
            @Switch.canceled -= instance.OnSwitch;
        }

        public void RemoveCallbacks(ISwitchMusicActions instance)
        {
            if (m_Wrapper.m_SwitchMusicActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISwitchMusicActions instance)
        {
            foreach (var item in m_Wrapper.m_SwitchMusicActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SwitchMusicActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SwitchMusicActions @SwitchMusic => new SwitchMusicActions(this);
    public interface IQuitGameActions
    {
        void OnQuit(InputAction.CallbackContext context);
    }
    public interface ISwitchMusicActions
    {
        void OnSwitch(InputAction.CallbackContext context);
    }
}
